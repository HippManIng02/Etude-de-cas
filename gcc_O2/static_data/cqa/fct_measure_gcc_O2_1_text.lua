_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - .plt.sec@start: 1 occurrences\n - unknown: 10 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          workaround = "Recompile with march=znver1.\nCQA target is AMD_fam17h_mod11h (1st generation Athlon and Ryzen 3/5/7 APUs based on the Zen microarchitecture) but specialization flags are -march=x86-64",
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTSI2SD: 5 occurrences\n - CVTSI2SS: 4 occurrences\n - JMP: 7 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          workaround = "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision. Usual math.h functions are double precision and their name needs to be suffixed with 'f' to use their single precision version which is faster and avoids type conversion. For instance, on single precision elements, call expf instead of exp.",
          details = " - CVTSI2SD (INT32/64 to FP64, scalar): 5 occurrences\n - CVTSI2SS (INT32/64 to FP32, scalar): 4 occurrences\n - CVTSS2SD (FP32 to FP64, scalar): 1 occurrences\n",
          title = "Conversion instructions",
          txt = "Detected expensive conversion instructions.",
        },
        {
          title = "Type of elements and instruction set",
          txt = "6 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n4 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 8 FP arithmetical operations:\n - 4: addition or subtraction\n - 1: multiply\n - 3: divide\nThe binary function is loading 144 bytes (36 single precision FP elements).\nThe binary function is storing 100 bytes (25 single precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.03 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 179\nnb uops            : 265\nloop length        : 793\nused x86 registers : 12\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 16\nADD-SUB / MUL ratio: 4.00\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 44.17 cycles\nfront end            : 44.17 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0  | AGU1  | FP0  | FP1  | FP2  | FP3\n-------------------------------------------------------------------------------------------\nuops   | 30.00     | 30.00 | 30.00 | 30.00     | 23.50 | 23.50 | 4.17 | 3.83 | 5.00 | 13.00\ncycles | 30.00     | 30.00 | 30.00 | 30.00     | 23.50 | 23.50 | 4.17 | 3.83 | 5.00 | 13.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU\n - AGU0 (128 bits): store address, load\n - AGU1 (128 bits): store address, load\n - FP0 (128 bits): VPU\n - FP1 (128 bits): VPU\n - FP2 (128 bits): VPU, FP store data\n - FP3 (128 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: 11.00-13.00\nCycles loading/storing data              : 15.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 44.17\nDispatch  : 30.00\nDIV/SQRT  : 11.00-13.00\nOverall L1: 44.17\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 14%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 22%\nFP\nall     : 13%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 40%\nINT+FP\nall     : 13%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 24%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 25%\nload   : 25%\nstore  : 19%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 26%\nFP\nall     : 22%\nload    : 15%\nstore   : 25%\nmul     : 12%\nadd-sub : 18%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 20%\nother   : 27%\nINT+FP\nall     : 24%\nload    : 22%\nstore   : 20%\nmul     : 12%\nadd-sub : 21%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 20%\nother   : 26%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 44.17 cycles. At this rate:\n - 10% of peak load performance is reached (3.26 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 14% of peak store performance is reached (2.26 out of 16.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 44.17 to 30.00 cycles (1.47x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 1180\n\nInstruction                     | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | FP0  | FP1  | FP2  | FP3  | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %R15                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R14                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R13                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R12                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %RBP                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %RBX                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nMOV %RSI,%RBX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSUB $0x178,%RSP                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %FS:0x28,%RAX               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV %RAX,0x168(%RSP)            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nXOR %EAX,%EAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCMP $0x4,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJE 11f9 <main+0x79>             | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV (%RSI),%RCX                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV 0x2e66(%RIP),%RDI           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nLEA 0xe57(%RIP),%RDX\nMOV $0x1,%ESI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCALL 1160 <.plt.sec@start+0x80> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV 0x168(%RSP),%RDX            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nSUB %FS:0x28,%RDX               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nJNE 170d <main+0x58d>           | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nADD $0x178,%RSP                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nPOP %RBX                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %RBP                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R12                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R13                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R14                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R15                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nRET                             | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV 0x8(%RSI),%RDI              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0xa,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nXOR %ESI,%ESI                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 1130 <.plt.sec@start+0x50> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x10(%RBX),%RDI             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nXOR %ESI,%ESI                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV $0xa,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %RAX,%R15                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RAX,0x68(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %EAX,0x1c(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %EAX,0x18(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nCALL 1130 <.plt.sec@start+0x50> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x18(%RBX),%RDI             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0xa,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nXOR %ESI,%ESI                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %EAX,0x58(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nCALL 1130 <.plt.sec@start+0x50> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nLEA 0x70(%RSP),%RCX\nMOV $-0x8,%RDX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOVQ $0,0x8(%RSP)               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %RAX,0x60(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %EAX,0x10(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %R15D,%EAX                  | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nIMUL %R15D,%EAX                 | 1     | 0         | 1    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 3       | 1\nMOV %RCX,0x48(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %EAX,0x5c(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nSAL $0x3,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %RAX,0x50(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOVSXD %R15D,%RAX               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nSAL $0x3,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %RAX,0x20(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nLEA -0x1(%R15),%EAX\nSAL $0x3,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nSUB %RAX,%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0x8(%RAX),%RCX\nCMPQ $0,0x8(%RSP)               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV %RCX,0x28(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %RDX,0x30(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nJE 1473 <main+0x2f3>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nNOP                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nNOPL (%RAX,%RAX,1)              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV 0x48(%RSP),%RDI             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV 0x60(%RSP),%EBX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0x8,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0x3d9(%RIP),%RCX\nIMUL 0x68(%RSP),%EBX            | 1     | 0         | 1    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 1\nMOV $0x1f,%ESI                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nIMUL 0x5c(%RSP),%EBX            | 1     | 0         | 1    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 1\nCALL 10f0 <.plt.sec@start+0x10> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x70(%RSP),%RDX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nPXOR %XMM1,%XMM1                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SD %RBX,%XMM1             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nTEST %RDX,%RDX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 1651 <main+0x4d1>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SD %RDX,%XMM0             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nDIVSD %XMM1,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 8-13    | 4-5\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOVSD %XMM1,0x8(%RSP)           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 1    | 0    | 1       | 1\nLEA 0xac2(%RIP),%RSI\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0xe8(%RSP),%RDX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOVSD 0x8(%RSP),%XMM1           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nTEST %RDX,%RDX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 16ae <main+0x52e>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SD %RDX,%XMM0             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nDIVSD %XMM1,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 8-13    | 4-5\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0xab8(%RIP),%RSI\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x70(%RSP),%RAX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV 0xe8(%RSP),%RDX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nSUB %RAX,%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 1690 <main+0x510>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SS %RDX,%XMM0             | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nMULSS 0xb64(%RIP),%XMM0         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 3       | 0.50\nTEST %RAX,%RAX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 1672 <main+0x4f2>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPXOR %XMM1,%XMM1                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SS %RAX,%XMM1             | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nDIVSS %XMM1,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 10      | 3\nPXOR %XMM1,%XMM1                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCOMISS 0xb4b(%RIP),%XMM0        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 1       | 0.50\nCVTSS2SD %XMM0,%XMM1            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 4       | 1\nJAE 16ec <main+0x56c>           | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nCOMISS 0xb3e(%RIP),%XMM0        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 1       | 0.50\nMOVAPD %XMM1,%XMM0              | 0     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nJB 16cf <main+0x54f>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nLEA 0xae1(%RIP),%RSI\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nXOR %EAX,%EAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nJMP 11d0 <main+0x50>            | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RDX,%RAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RDX,%RCX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nAND $0x1,%ECX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RCX,%RAX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCVTSI2SD %RAX,%XMM0             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nADDSD %XMM0,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 157b <main+0x3fb>           | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RAX,%RDX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nAND $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nPXOR %XMM1,%XMM1                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RAX,%RDX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCVTSI2SS %RDX,%XMM1             | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nADDSS %XMM1,%XMM1               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 160a <main+0x48a>           | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RDX,%RCX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nAND $0x1,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RCX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RDX,%RCX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCVTSI2SS %RCX,%XMM0             | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nADDSS %XMM0,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 15f4 <main+0x474>           | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RDX,%RAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RDX,%RCX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nAND $0x1,%ECX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RCX,%RAX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCVTSI2SD %RAX,%XMM0             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nADDSD %XMM0,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 15bb <main+0x43b>           | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nLEA 0xa62(%RIP),%RSI\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nXOR %EAX,%EAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nJMP 11d0 <main+0x50>            | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOVAPD %XMM1,%XMM0              | 0     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0xa03(%RIP),%RSI\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nXOR %EAX,%EAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nJMP 11d0 <main+0x50>            | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nCALL 1110 <.plt.sec@start+0x30> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nNOPW %CS:(%RAX,%RAX,1)          | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nNOPL (%RAX)                     | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\n",
        },
      },
      header = {
        "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - The number of fused uops of the instruction [LEA	0xe57(%RIP),%RDX] is unknown\n - The number of fused uops of the instruction [LEA	0x70(%RSP),%RCX] is unknown\n - The number of fused uops of the instruction [LEA	-0x1(%R15),%EAX] is unknown\n - The number of fused uops of the instruction [LEA	0x8(%RAX),%RCX] is unknown\n - The number of fused uops of the instruction [LEA	0x3d9(%RIP),%RCX] is unknown\n - The number of fused uops of the instruction [LEA	0xac2(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0xab8(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0xae1(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0xa62(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0xa03(%RIP),%RSI] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
        "0% of peak computational performance is used (0.18 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 44.17 to 13.00 cycles (3.40x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
          details = "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is probably not vectorized.\nOnly 24% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 44.17 to 6.85 cycles (6.45x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          workaround = " - Recompile with march=znver1.\nCQA target is AMD_fam17h_mod11h (1st generation Athlon and Ryzen 3/5/7 APUs based on the Zen microarchitecture) but specialization flags are -march=x86-64\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
          title = "FMA",
          txt = "Presence of both ADD/SUB and MUL operations.",
        },
      },
    },
  },
  AVG = {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - .plt.sec@start: 1 occurrences\n - unknown: 10 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          workaround = "Recompile with march=znver1.\nCQA target is AMD_fam17h_mod11h (1st generation Athlon and Ryzen 3/5/7 APUs based on the Zen microarchitecture) but specialization flags are -march=x86-64",
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTSI2SD: 5 occurrences\n - CVTSI2SS: 4 occurrences\n - JMP: 7 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          workaround = "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision. Usual math.h functions are double precision and their name needs to be suffixed with 'f' to use their single precision version which is faster and avoids type conversion. For instance, on single precision elements, call expf instead of exp.",
          details = " - CVTSI2SD (INT32/64 to FP64, scalar): 5 occurrences\n - CVTSI2SS (INT32/64 to FP32, scalar): 4 occurrences\n - CVTSS2SD (FP32 to FP64, scalar): 1 occurrences\n",
          title = "Conversion instructions",
          txt = "Detected expensive conversion instructions.",
        },
        {
          title = "Type of elements and instruction set",
          txt = "6 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n4 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 8 FP arithmetical operations:\n - 4: addition or subtraction\n - 1: multiply\n - 3: divide\nThe binary function is loading 144 bytes (36 single precision FP elements).\nThe binary function is storing 100 bytes (25 single precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.03 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 179\nnb uops            : 265\nloop length        : 793\nused x86 registers : 12\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 16\nADD-SUB / MUL ratio: 4.00\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 44.17 cycles\nfront end            : 44.17 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3/BRU1 | AGU0  | AGU1  | FP0  | FP1  | FP2  | FP3\n-------------------------------------------------------------------------------------------\nuops   | 30.00     | 30.00 | 30.00 | 30.00     | 23.50 | 23.50 | 4.17 | 3.83 | 5.00 | 13.00\ncycles | 30.00     | 30.00 | 30.00 | 30.00     | 23.50 | 23.50 | 4.17 | 3.83 | 5.00 | 13.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3/BRU1: ALU\n - AGU0 (128 bits): store address, load\n - AGU1 (128 bits): store address, load\n - FP0 (128 bits): VPU\n - FP1 (128 bits): VPU\n - FP2 (128 bits): VPU, FP store data\n - FP3 (128 bits): VPU, DIV/SQRT\n\nCycles executing div or sqrt instructions: 11.00-13.00\nCycles loading/storing data              : 15.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 44.17\nDispatch  : 30.00\nDIV/SQRT  : 11.00-13.00\nOverall L1: 44.17\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 14%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 22%\nFP\nall     : 13%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 40%\nINT+FP\nall     : 13%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 24%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 25%\nload   : 25%\nstore  : 19%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 26%\nFP\nall     : 22%\nload    : 15%\nstore   : 25%\nmul     : 12%\nadd-sub : 18%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 20%\nother   : 27%\nINT+FP\nall     : 24%\nload    : 22%\nstore   : 20%\nmul     : 12%\nadd-sub : 21%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 20%\nother   : 26%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 44.17 cycles. At this rate:\n - 10% of peak load performance is reached (3.26 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 14% of peak store performance is reached (2.26 out of 16.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 44.17 to 30.00 cycles (1.47x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 1180\n\nInstruction                     | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3/BRU1 | AGU0 | AGU1 | FP0  | FP1  | FP2  | FP3  | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %R15                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R14                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R13                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R12                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %RBP                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %RBX                       | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nMOV %RSI,%RBX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSUB $0x178,%RSP                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %FS:0x28,%RAX               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV %RAX,0x168(%RSP)            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nXOR %EAX,%EAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCMP $0x4,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJE 11f9 <main+0x79>             | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV (%RSI),%RCX                 | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV 0x2e66(%RIP),%RDI           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nLEA 0xe57(%RIP),%RDX\nMOV $0x1,%ESI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCALL 1160 <.plt.sec@start+0x80> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV 0x168(%RSP),%RDX            | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nSUB %FS:0x28,%RDX               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nJNE 170d <main+0x58d>           | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nADD $0x178,%RSP                 | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nPOP %RBX                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %RBP                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R12                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R13                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R14                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R15                        | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nRET                             | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV 0x8(%RSI),%RDI              | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0xa,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nXOR %ESI,%ESI                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 1130 <.plt.sec@start+0x50> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x10(%RBX),%RDI             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nXOR %ESI,%ESI                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV $0xa,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %RAX,%R15                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RAX,0x68(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %EAX,0x1c(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %EAX,0x18(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nCALL 1130 <.plt.sec@start+0x50> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x18(%RBX),%RDI             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0xa,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nXOR %ESI,%ESI                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %EAX,0x58(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nCALL 1130 <.plt.sec@start+0x50> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nLEA 0x70(%RSP),%RCX\nMOV $-0x8,%RDX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOVQ $0,0x8(%RSP)               | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %RAX,0x60(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %EAX,0x10(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %R15D,%EAX                  | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nIMUL %R15D,%EAX                 | 1     | 0         | 1    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 3       | 1\nMOV %RCX,0x48(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %EAX,0x5c(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nSAL $0x3,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %RAX,0x50(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOVSXD %R15D,%RAX               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nSAL $0x3,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %RAX,0x20(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nLEA -0x1(%R15),%EAX\nSAL $0x3,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nSUB %RAX,%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0x8(%RAX),%RCX\nCMPQ $0,0x8(%RSP)               | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV %RCX,0x28(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nMOV %RDX,0x30(%RSP)             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nJE 1473 <main+0x2f3>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nNOP                             | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nNOPL (%RAX,%RAX,1)              | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV 0x48(%RSP),%RDI             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV 0x60(%RSP),%EBX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0x8,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0x3d9(%RIP),%RCX\nIMUL 0x68(%RSP),%EBX            | 1     | 0         | 1    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 1\nMOV $0x1f,%ESI                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nIMUL 0x5c(%RSP),%EBX            | 1     | 0         | 1    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 1\nCALL 10f0 <.plt.sec@start+0x10> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x70(%RSP),%RDX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nPXOR %XMM1,%XMM1                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SD %RBX,%XMM1             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nTEST %RDX,%RDX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 1651 <main+0x4d1>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SD %RDX,%XMM0             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nDIVSD %XMM1,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 8-13    | 4-5\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOVSD %XMM1,0x8(%RSP)           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 1    | 0    | 1       | 1\nLEA 0xac2(%RIP),%RSI\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0xe8(%RSP),%RDX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOVSD 0x8(%RSP),%XMM1           | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nTEST %RDX,%RDX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 16ae <main+0x52e>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SD %RDX,%XMM0             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nDIVSD %XMM1,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 8-13    | 4-5\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0xab8(%RIP),%RSI\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x70(%RSP),%RAX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV 0xe8(%RSP),%RDX             | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nSUB %RAX,%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 1690 <main+0x510>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SS %RDX,%XMM0             | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nMULSS 0xb64(%RIP),%XMM0         | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 3       | 0.50\nTEST %RAX,%RAX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 1672 <main+0x4f2>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPXOR %XMM1,%XMM1                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCVTSI2SS %RAX,%XMM1             | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nDIVSS %XMM1,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 10      | 3\nPXOR %XMM1,%XMM1                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCOMISS 0xb4b(%RIP),%XMM0        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 1       | 0.50\nCVTSS2SD %XMM0,%XMM1            | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 4       | 1\nJAE 16ec <main+0x56c>           | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nCOMISS 0xb3e(%RIP),%XMM0        | 1     | 0         | 0    | 0    | 0         | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 1       | 0.50\nMOVAPD %XMM1,%XMM0              | 0     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nJB 16cf <main+0x54f>            | 1     | 0.50      | 0    | 0    | 0.50      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nLEA 0xae1(%RIP),%RSI\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nXOR %EAX,%EAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nJMP 11d0 <main+0x50>            | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RDX,%RAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RDX,%RCX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nAND $0x1,%ECX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RCX,%RAX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCVTSI2SD %RAX,%XMM0             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nADDSD %XMM0,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 157b <main+0x3fb>           | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RAX,%RDX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nAND $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nPXOR %XMM1,%XMM1                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RAX,%RDX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCVTSI2SS %RDX,%XMM1             | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nADDSS %XMM1,%XMM1               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 160a <main+0x48a>           | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RDX,%RCX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nAND $0x1,%EDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RCX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RDX,%RCX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCVTSI2SS %RCX,%XMM0             | 2     | 0         | 0    | 1    | 0         | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nADDSS %XMM0,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 15f4 <main+0x474>           | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RDX,%RAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RDX,%RCX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nPXOR %XMM0,%XMM0                | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nAND $0x1,%ECX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RCX,%RAX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCVTSI2SD %RAX,%XMM0             | 2     | 0         | 0    | 0    | 0         | 0    | 0    | 0.33 | 0.33 | 0    | 1.33 | 7       | 1\nADDSD %XMM0,%XMM0               | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 15bb <main+0x43b>           | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nLEA 0xa62(%RIP),%RSI\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nXOR %EAX,%EAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nJMP 11d0 <main+0x50>            | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOVAPD %XMM1,%XMM0              | 0     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x1,%EAX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0xa03(%RIP),%RSI\nCALL 1150 <.plt.sec@start+0x70> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nXOR %EAX,%EAX                   | 1     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nJMP 11d0 <main+0x50>            | 6     | 0         | 0    | 0    | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nCALL 1110 <.plt.sec@start+0x30> | 6     | 1.25      | 1.25 | 1.25 | 1.25      | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nNOPW %CS:(%RAX,%RAX,1)          | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nNOPL (%RAX)                     | 1     | 0.25      | 0.25 | 0.25 | 0.25      | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\n",
        },
      },
      header = {
        "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - The number of fused uops of the instruction [LEA	0xe57(%RIP),%RDX] is unknown\n - The number of fused uops of the instruction [LEA	0x70(%RSP),%RCX] is unknown\n - The number of fused uops of the instruction [LEA	-0x1(%R15),%EAX] is unknown\n - The number of fused uops of the instruction [LEA	0x8(%RAX),%RCX] is unknown\n - The number of fused uops of the instruction [LEA	0x3d9(%RIP),%RCX] is unknown\n - The number of fused uops of the instruction [LEA	0xac2(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0xab8(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0xae1(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0xa62(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0xa03(%RIP),%RSI] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
        "0% of peak computational performance is used (0.18 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 44.17 to 13.00 cycles (3.40x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
          details = "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is probably not vectorized.\nOnly 24% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 44.17 to 6.85 cycles (6.45x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          workaround = " - Recompile with march=znver1.\nCQA target is AMD_fam17h_mod11h (1st generation Athlon and Ryzen 3/5/7 APUs based on the Zen microarchitecture) but specialization flags are -march=x86-64\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
          title = "FMA",
          txt = "Presence of both ADD/SUB and MUL operations.",
        },
      },
    },
  common = {
    header = {
      "The function is defined in:\n - /usr/include/stdlib.h:364\n - /usr/include/x86_64-linux-gnu/bits/stdio2.h:105,112\n - /home/hippolyte/Documents/Projet/AOA/demo_2024/Etude-de-cas/driver.c:13-18,30-46,52-96\n\n",
      "Warnings:\nIgnoring paths for analysis",
    },
  },
  _objects = {
     ["image_vec_align"] = {type = "image", format = "url", data = "../images/cqa/vec_align.svg", size = {x = 500, }, },
     ["image_1x64_512"] = {type = "image", format = "url", data = "../images/cqa/1x64_512.svg", size = {x = 500, }, },
     ["image_1x32_128"] = {type = "image", format = "url", data = "../images/cqa/1x32_128.svg", size = {x = 500, }, },
     ["image_4x32_256"] = {type = "image", format = "url", data = "../images/cqa/4x32_256.svg", size = {x = 500, }, },
     ["image_1x64_128"] = {type = "image", format = "url", data = "../images/cqa/1x64_128.svg", size = {x = 500, }, },
     ["image_4x32_512"] = {type = "image", format = "url", data = "../images/cqa/4x32_512.svg", size = {x = 500, }, },
     ["image_8x32_512"] = {type = "image", format = "url", data = "../images/cqa/8x32_512.svg", size = {x = 500, }, },
     ["image_1x32_256"] = {type = "image", format = "url", data = "../images/cqa/1x32_256.svg", size = {x = 500, }, },
     ["image_2x64_512"] = {type = "image", format = "url", data = "../images/cqa/2x64_512.svg", size = {x = 500, }, },
     ["image_col_maj"] = {type = "image", format = "url", data = "../images/cqa/col_maj.svg", size = {x = 500, }, },
     ["image_1x64_256"] = {type = "image", format = "url", data = "../images/cqa/1x64_256.svg", size = {x = 500, }, },
     ["image_row_maj"] = {type = "image", format = "url", data = "../images/cqa/row_maj.svg", size = {x = 500, }, },
     ["image_4x64_512"] = {type = "image", format = "url", data = "../images/cqa/4x64_512.svg", size = {x = 500, }, },
     ["image_1x32_512"] = {type = "image", format = "url", data = "../images/cqa/1x32_512.svg", size = {x = 500, }, },
     ["image_2x64_256"] = {type = "image", format = "url", data = "../images/cqa/2x64_256.svg", size = {x = 500, }, },
  },
}
