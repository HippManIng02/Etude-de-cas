/usr/include/stdlib.h: 364 - 364
--------------------------------------------------------------------------------

364:   return (int) strtol (__nptr, (char **) NULL, 10);
/usr/include/x86_64-linux-gnu/bits/stdio2.h: 105 - 112
--------------------------------------------------------------------------------

105:   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
[...]
112:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
/home/hippolyte/Documents/Projet/AOA/demo_2024/Etude-de-cas/driver.c: 13 - 96
--------------------------------------------------------------------------------

13: static void init_array (int n, double a[n][n]) {
14:    int i, j;
15: 
16:    for (i=0; i<n; i++)
17:       for (j=0; j<n; j++)
18:          a[i][j] = (double) rand() / RAND_MAX;
[...]
30: int main (int argc, char *argv[]) {
31:    /* check command line arguments */
32:    if (argc != 4) {
33:       fprintf (stderr, "Usage: %s <size> <nb warmup repets> <nb measure repets>\n", argv[0]);
34:       return 1;
35:    }
36: 
37:    /* get command line arguments */
38:    const unsigned size = atoi (argv[1]); /* problem size */
39:    const unsigned repw = atoi (argv[2]); /* number of warmup repetitions */
40:    const unsigned repm = atoi (argv[3]); /* number of repetitions during measurement */
41: 
42:    uint64_t tdiff [NB_METAS];
43: 
44:    unsigned m;
45:    for (m=0; m<NB_METAS; m++) {
46:       printf ("Metarepetition %u/%d: running %u warmup instances and %u measure instances\n", m+1, NB_METAS,
[...]
52:       double (*a)[size] = malloc (size * size * sizeof a[0][0]);
53:       double (*b)[size] = malloc (size * size * sizeof b[0][0]);
54: 
55:       /* init arrays */
56:       srand(0);
57:       init_array (size, a);
58:       init_array (size, b);
59: 
60:       /* warmup (repw repetitions in first meta, 1 repet in next metas) */
61:       if (m == 0) {
62:          for (i=0; i<repw; i++)
63:             kernel (size, a, b);
64:       } else {
65:          kernel (size, a, b);
66:       }
67: 
68:       /* measure repm repetitions */
69:       const uint64_t t1 = rdtsc();
70:       for (i=0; i<repm; i++) {
71:          kernel (size, a, b);
72:       }
73:       const uint64_t t2 = rdtsc();
74:       tdiff[m] = t2 - t1;
75: 
76:       /* free arrays. TODO: adjust for each kernel */
77:       free (a);
78:       free (b);
79:    }
80: 
81:    const uint64_t nb_inner_iters = size * size * repm; // TODO adjust for each kernel
82:    qsort (tdiff, NB_METAS, sizeof tdiff[0], cmp_uint64);
83:    printf ("MIN %lu RDTSC-cycles (%.2f per inner-iter)\n",
84:            tdiff[0], (double) tdiff[0] / nb_inner_iters);
85:    printf ("MED %lu RDTSC-cycles (%.2f per inner-iter)\n",
86:            tdiff[m/2], (double) tdiff[m/2] / nb_inner_iters);
87:    const double stab = (tdiff[m/2] - tdiff[0]) * 100.0f / tdiff[0];
88:    if (stab >= 10)
89:       printf ("BAD STABILITY: %.2f %%\n", stab);
90:    else if (stab >= 5)
91:       printf ("AVERAGE STABILITY: %.2f %%\n", stab);
92:    else
93:       printf ("GOOD STABILITY: %.2f %%\n", stab);
94: 
95:    return EXIT_SUCCESS;
96: }
